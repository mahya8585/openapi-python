# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2022-07-30T06:36:44+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional
from uuid import UUID

from pydantic import BaseModel, Field, SecretStr


class Error(BaseModel):
    message: Optional[str] = Field(None, description='画面表示用エラーメッセージ')


class Auth(BaseModel):
    password: SecretStr = Field(..., description='ハッシュ')
    email: str


class Image(Enum):
    icon1 = 'icon1'
    icon2 = 'icon2'
    icon3 = 'icon3'


class Saketomo(BaseModel):
    id: Optional[UUID] = None
    name: Optional[str] = None
    image: Optional[Image] = Field(
        None,
        description='既存画像から選んでもらう(キーもしくはURL)。enumにない値もしくは空/nullの場合はバリデーションチェックでエラーにします',
    )


class Image1(Enum):
    icon1 = 'icon1'
    icon2 = 'icon2'
    icon3 = 'icon3'


class Saketomo1(BaseModel):
    name: str
    image: Image1 = Field(
        ...,
        description='既存画像から選んでもらう(キーもしくはURL)。enumにない値もしくは空/nullの場合はバリデーションチェックでエラーにします',
    )
    auth: Auth


class CreateSaketomo(BaseModel):
    saketomo: Optional[Saketomo1] = None


class Image2(Enum):
    icon1 = 'icon1'
    icon2 = 'icon2'
    icon3 = 'icon3'


class SaketomoWithAuth(BaseModel):
    id: UUID
    name: str
    image: Image2 = Field(
        ...,
        description='既存画像から選んでもらう(キーもしくはURL)。enumにない値もしくは空/nullの場合はバリデーションチェックでエラーにします',
    )
    auth: Auth


class Brewery(BaseModel):
    name: Optional[str] = None
    prefecture: Optional[str] = None


class Sake(BaseModel):
    id: Optional[UUID] = None
    name: Optional[str] = None
    image: Optional[str] = None
    brewery: Optional[Brewery] = None
    alcohol: Optional[float] = None
    polishingRatio: Optional[float] = None
    type: Optional[str] = Field(None, description='特定名称 (例)吟醸酒、大吟醸など')
    description: Optional[str] = None
    taste: Optional[List[str]] = Field(
        None, description='味情報は固定カラムを持たずに、自由入力。(例)ハッシュタグ'
    )


class Image3(Enum):
    icon1 = 'icon1'
    icon2 = 'icon2'
    icon3 = 'icon3'


class Saketomo2(BaseModel):
    id: Optional[UUID] = None
    name: Optional[str] = None
    image: Optional[Image3] = None


class Review(BaseModel):
    id: Optional[UUID] = None
    saketomo: Optional[Saketomo2] = Field(None, description='登録者情報')
    createdAt: Optional[datetime] = Field(None, description='作成日時')
    rating: Optional[int] = None
    comment: Optional[str] = None


class Image4(Enum):
    icon1 = 'icon1'
    icon2 = 'icon2'
    icon3 = 'icon3'


class Saketomo3(BaseModel):
    id: Optional[UUID] = None
    name: Optional[str] = None
    image: Optional[Image4] = None


class CreateReview(BaseModel):
    saketomo: Optional[Saketomo3] = Field(None, description='登録者情報')
    rating: Optional[int] = None
    comment: Optional[str] = None


class DeleteReview(BaseModel):
    saketomoId: Optional[UUID] = Field(None, description='登録者ID')


class Brewery1(BaseModel):
    name: Optional[str] = None
    prefecture: Optional[str] = None


class CreateSake(BaseModel):
    name: Optional[str] = None
    image: Optional[str] = None
    brewery: Optional[Brewery1] = None
    alcohol: Optional[float] = None
    polishingRatio: Optional[float] = None
    type: Optional[str] = Field(None, description='特定名称 (例)吟醸酒、大吟醸など')
    description: Optional[str] = None
    taste: Optional[Dict[str, Any]] = Field(
        None, description='味情報は固定カラムを持たずに、自由入力。(例)J-SON、ハッシュタグ'
    )


class SakeResponse(BaseModel):
    sake: Optional[Sake] = None


class SaketomoResponse(BaseModel):
    saketomo: Optional[Saketomo] = None


class SakeListResponse(BaseModel):
    totalCount: Optional[int] = None
    sakeList: Optional[List[Sake]] = None


class SaketomoPostResponse(BaseModel):
    saketomo: Optional[Saketomo] = None


class SaketomoSaketomoIdPostResponse(BaseModel):
    saketomo: Optional[Saketomo] = None


class SakePostResponse(BaseModel):
    sake: Optional[Sake] = None


class ReviewGetResponse(BaseModel):
    review: Optional[List[Review]] = None


class ReviewPostResponse(BaseModel):
    review: Optional[List[Review]] = None
