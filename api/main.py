# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2022-07-30T06:36:44+00:00

from __future__ import annotations

from typing import Optional, Union

from fastapi import FastAPI, Path, Query

from .models import (
    CreateReview,
    CreateSake,
    CreateSaketomo,
    DeleteReview,
    Error,
    ReviewGetResponse,
    ReviewPostResponse,
    SakeListResponse,
    SakePostResponse,
    SakeResponse,
    SaketomoPostResponse,
    SaketomoResponse,
    SaketomoSaketomoIdPostResponse,
    SaketomoWithAuth,
)

app = FastAPI(
    title='ぽんしゅきー',
    description='ぽんしゅきーサイトで使用するバックエンドAPI',
    contact={'email': 'javawoman.tokyo@gmail.com'},
    license={
        'name': 'Apache 2.0',
        'url': 'http://www.apache.org/licenses/LICENSE-2.0.html',
    },
    version='0.0.1',
)


@app.get(
    '/review',
    response_model=ReviewGetResponse,
    responses={'400': {'model': Error}, '500': {'model': Error}},
)
def get_review(
    sake_id: Optional[str] = Query(None, alias='sakeId'), limit: int, offset: int = ...
) -> Union[ReviewGetResponse, Error]:
    """
    口コミ情報取得API.
    """
    pass


@app.post(
    '/review',
    response_model=ReviewPostResponse,
    responses={'400': {'model': Error}, '500': {'model': Error}},
)
def create_review(body: CreateReview) -> Union[ReviewPostResponse, Error]:
    """
    口コミ情報登録API
    """
    pass


@app.post(
    '/review/{review_id}',
    response_model=None,
    responses={'400': {'model': Error}, '500': {'model': Error}},
)
def delete_review(
    review_id: str = Path(..., alias='reviewId'), body: DeleteReview = ...
) -> Union[None, Error]:
    """
    口コミ情報削除API
    """
    pass


@app.get(
    '/sake',
    response_model=SakeListResponse,
    responses={'400': {'model': Error}, '500': {'model': Error}},
)
def get_sake(limit: int, offset: int = ...) -> Union[SakeListResponse, Error]:
    """
    酒情報一覧取得API
    """
    pass


@app.post(
    '/sake',
    response_model=SakePostResponse,
    responses={'400': {'model': Error}, '500': {'model': Error}},
)
def create_sake(body: CreateSake) -> Union[SakePostResponse, Error]:
    """
    酒情報登録API
    """
    pass


@app.get(
    '/sake/{sake_id}',
    response_model=SakeResponse,
    responses={'400': {'model': Error}, '500': {'model': Error}},
)
def get_sake_detail(
    sake_id: str = Path(..., alias='sakeId')
) -> Union[SakeResponse, Error]:
    """
    酒情報取得API
    """
    pass


@app.post(
    '/saketomo',
    response_model=SaketomoPostResponse,
    responses={'400': {'model': Error}, '500': {'model': Error}},
)
def create_saketomo(body: CreateSaketomo) -> Union[SaketomoPostResponse, Error]:
    """
    会員登録API
    """
    pass


@app.get(
    '/saketomo/{saketomo_id}',
    response_model=SaketomoResponse,
    responses={'400': {'model': Error}, '500': {'model': Error}},
)
def get_saketomo(
    saketomo_id: str = Path(..., alias='saketomoId')
) -> Union[SaketomoResponse, Error]:
    """
    会員情報取得API
    """
    pass


@app.post(
    '/saketomo/{saketomo_id}',
    response_model=SaketomoSaketomoIdPostResponse,
    responses={'400': {'model': Error}, '500': {'model': Error}},
)
def update_saketomo(
    saketomo_id: str = Path(..., alias='saketomoId'), body: SaketomoWithAuth = ...
) -> Union[SaketomoSaketomoIdPostResponse, Error]:
    """
    会員編集API
    """
    pass
